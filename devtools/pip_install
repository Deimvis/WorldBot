#!/usr/bin/env python3

import argparse
import logging
import re
import sys
import subprocess as sp

logging.basicConfig(level=logging.INFO)


REQUIREMENTS_FILE_PATH = 'requirements.txt'


def parse_args():
    parser = argparse.ArgumentParser(description='Install python package via pip and update requirements.txt')
    parser.add_argument('packages', type=str, nargs='+', help='Package names')
    return parser.parse_args()


def get_current_packages():
    with open(REQUIREMENTS_FILE_PATH, 'r') as f:
        packages = [line for line in f if len(line) >  0]
    return packages


def update_packages(package_names):
    installed_packages = sp.check_output([sys.executable, '-m', 'pip', 'freeze']).decode('utf-8').split('\n')
    packages = []
    for name in package_names:
        package = None
        for p in installed_packages:
            if p.lower().startswith(name.lower()):
                package = p.replace('==', '~=')
        assert package is not None, f'Package {name} isn\'t found among installed'
        packages.append(package)
    with open(REQUIREMENTS_FILE_PATH, 'w') as f:
        for package in sorted(packages):
            f.write(package + '\n')
            logging.info(package)


def main():
    args = parse_args()
    packages = get_current_packages()
    package_names = set()
    for package in packages:
        match_result = re.fullmatch(r'^(?P<package_name>^.+?)(?=(=|~|>)=).+\s?$', package)
        assert match_result is not None, 'Couldn\'t parse package string from requirements.txt'
        package_names.add(match_result.group('package_name'))
    for new_package_name in args.packages:
        if new_package_name in package_names:
            logging.warning(f'Package is already installed ({new_package_name})')
            continue
        package_names.add(new_package_name)
        sp.check_call([sys.executable, '-m', 'pip', 'install', new_package_name])
    update_packages(package_names)

if __name__ == '__main__':
    main()
